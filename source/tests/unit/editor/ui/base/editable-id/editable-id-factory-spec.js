xdescribe('EditableIDFactory', function() {
  var Mock = {};
  var factory;

  beforeEach(function() {
    angular.mock.module('studio');

    inject(function(_$injector_) {
      mockItem(_$injector_);
      mockCheckboxAnswerOptionFactory(_$injector_);

      factory = _$injector_.get('EditableIDFactory', {
        'UpdateSurveyItemCustomID': mockUpdateSurveyItemCustomID(_$injector_)
      });

    });
  });

  describe('EditableIDFactory.create() method', function() {

    it('should be defined on the factory', function() {
      expect(factory.create).toBeDefined();
    });

  });

  describe('EditableComponentID Object', function() {

    describe('getAutoGeneratedID method', function() {

      it('should return the correct auto generatedID with a item instance', function() {
        var editableComponentID = factory.create(Mock.item);
        expect(editableComponentID.getAutoGeneratedID()).toBe('Q1');
      });

      it('should return the correct auto generatedID with a checkbox option instance', function() {
        var editableComponentID = factory.create(Mock.option);
        expect(editableComponentID.getAutoGeneratedID()).toBe('Q1a');
      });

    });

    describe('getCustomizedID method', function() {

      it('should return the correct customized with a item instance', function() {
        var editableComponentID = factory.create(Mock.item);
        expect(editableComponentID.getCustomizedID()).toBe('Q1');
      });

      it('should return the correct customized with a checkbox option instance', function() {
        var editableComponentID = factory.create(Mock.option);
        expect(editableComponentID.getCustomizedID()).toBe('Q1a');
      });

    });

    describe('getLastValidID method', function() {

      var editableComponentID;

      beforeEach(function() {
        editableComponentID = factory.create(Mock.item);
      });

      it('should return undefined if the item does not updated', function() {
        expect(editableComponentID.getLastValidID()).toBeUndefined();
      });

      it('should return the last customizedID before a item to be updated', function() {
        editableComponentID.updateCustomizedID('MyNewID');
        expect(editableComponentID.getLastValidID()).toBe('MyNewID');
      });

    });

    describe('updateCustomizedID method', function() {

      it('should call UpdateSurveyItemCustomID.execute method if was a item instance', function() {
        var editableComponentID = factory.create(Mock.item);

        editableComponentID.updateCustomizedID('myCustomID');

        expect(Mock.UpdateSurveyItemCustomID.execute).toHaveBeenCalled();
      });

      it('should not call UpdateSurveyItemCustomID.execute method if was a CheckboxAnswerOption instance', function() {
        var editableComponentID = factory.create(Mock.option);

        editableComponentID.updateCustomizedID('myCustomID');

        expect(Mock.UpdateSurveyItemCustomID.execute).not.toHaveBeenCalled();
      });

      it('should update property customOptionID of CheckboxAnswerOption instance', function() {
        var editableComponentID = factory.create(Mock.option);

        editableComponentID.updateCustomizedID('myCustomID');

        expect(editableComponentID.getCustomizedID()).toBe('myCustomID');
      });

    });
  });

  function mockCheckboxAnswerOptionFactory($injector) {
    Mock.option = $injector.get('CheckboxAnswerOptionFactory').create('Q1a');
  }

  function mockItem($injector) {
    Mock.item = $injector.get('SurveyItemFactory').create('CalendarQuestion', 'Q1');
  }

  function mockUpdateSurveyItemCustomID($injector) {
    Mock.UpdateSurveyItemCustomID = $injector.get('UpdateSurveyItemCustomID');

    spyOn(Mock.UpdateSurveyItemCustomID, 'execute');

    return Mock.UpdateSurveyItemCustomID;
  }

});
